#!/bin/bash
# 简洁的记忆搜索命令
# 使用方法: memory-recall "搜索关键词" [--max-results N] [--min-relevance N]

cd "/root/code/claude-memory-system"
source .venv/bin/activate

QUERY=""
MAX_RESULTS=3
MIN_RELEVANCE=0.1

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --max-results)
            MAX_RESULTS="$2"
            shift 2
            ;;
        --min-relevance)
            MIN_RELEVANCE="$2"
            shift 2
            ;;
        *)
            if [ -z "$QUERY" ]; then
                QUERY="$1"
            fi
            shift
            ;;
    esac
done

if [ -z "$QUERY" ]; then
    echo "❌ 用法: memory-recall \"搜索关键词\" [--max-results N] [--min-relevance N]"
    echo "示例: memory-recall \"Python性能优化\" --max-results 3 --min-relevance 0.1"
    exit 1
fi

python3 -c "
import sys
sys.path.insert(0, '.')
from claude_memory import MemoryManager
from pathlib import Path

try:
    memory = MemoryManager(Path('..'))
    results = memory.recall('''$QUERY''', max_results=$MAX_RESULTS, min_relevance=$MIN_RELEVANCE)
    
    if results:
        print(f'🔍 找到 {len(results)} 个相关记忆:')
        print()
        for i, result in enumerate(results, 1):
            memory = result.memory
            print(f'{i}. 📝 {memory.title}')
            print(f'   内容: {memory.content[:150]}...' if len(memory.content) > 150 else f'   内容: {memory.content}')
            print(f'   类型: {memory.memory_type.value} | 重要性: {memory.importance}/10')
            print(f'   相关性: {result.relevance_score:.3f}')
            if memory.tags:
                print(f'   标签: {\"、\".join(memory.tags)}')
            print()
    else:
        print('❌ 未找到相关记忆')
        
except Exception as e:
    print(f'❌ 搜索失败: {e}')
    exit(1)
"